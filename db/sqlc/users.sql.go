// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package db

import (
	"context"
)

const listUsers = `-- name: ListUsers :many
SELECT user_id, nick_name, email, hashed_password, created_at, updated_at FROM users
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.NickName,
			&i.Email,
			&i.HashedPassword,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const store = `-- name: Store :one
INSERT INTO users (
    nick_name,
    email,
    hashed_password
) VALUES (
    $1, $2, $3
) RETURNING user_id, nick_name, email, hashed_password, created_at, updated_at
`

type StoreParams struct {
	NickName       string `json:"nick_name"`
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) Store(ctx context.Context, arg StoreParams) (User, error) {
	row := q.db.QueryRowContext(ctx, store, arg.NickName, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.NickName,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
