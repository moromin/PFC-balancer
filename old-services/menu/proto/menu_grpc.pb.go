// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: services/menu/proto/menu.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MenuServiceClient is the client API for MenuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MenuServiceClient interface {
	// food
	FindFoodById(ctx context.Context, in *FindFoodByIdRequest, opts ...grpc.CallOption) (*FindFoodByIdResponse, error)
	ListFoods(ctx context.Context, in *ListFoodsRequest, opts ...grpc.CallOption) (*ListFoodsResponse, error)
	SearchFoods(ctx context.Context, in *SearchFoodsRequest, opts ...grpc.CallOption) (*SearchFoodsResponse, error)
	// recipe
	CreateRecipe(ctx context.Context, in *CreateRecipeRequest, opts ...grpc.CallOption) (*CreateRecipeResponse, error)
	FindRecipeById(ctx context.Context, in *FindRecipeByIdRequest, opts ...grpc.CallOption) (*FindRecipeByIdResponse, error)
	ListRecipes(ctx context.Context, in *ListRecipesRequest, opts ...grpc.CallOption) (*ListRecipesResponse, error)
}

type menuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMenuServiceClient(cc grpc.ClientConnInterface) MenuServiceClient {
	return &menuServiceClient{cc}
}

func (c *menuServiceClient) FindFoodById(ctx context.Context, in *FindFoodByIdRequest, opts ...grpc.CallOption) (*FindFoodByIdResponse, error) {
	out := new(FindFoodByIdResponse)
	err := c.cc.Invoke(ctx, "/menu.MenuService/FindFoodById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) ListFoods(ctx context.Context, in *ListFoodsRequest, opts ...grpc.CallOption) (*ListFoodsResponse, error) {
	out := new(ListFoodsResponse)
	err := c.cc.Invoke(ctx, "/menu.MenuService/ListFoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) SearchFoods(ctx context.Context, in *SearchFoodsRequest, opts ...grpc.CallOption) (*SearchFoodsResponse, error) {
	out := new(SearchFoodsResponse)
	err := c.cc.Invoke(ctx, "/menu.MenuService/SearchFoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) CreateRecipe(ctx context.Context, in *CreateRecipeRequest, opts ...grpc.CallOption) (*CreateRecipeResponse, error) {
	out := new(CreateRecipeResponse)
	err := c.cc.Invoke(ctx, "/menu.MenuService/CreateRecipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) FindRecipeById(ctx context.Context, in *FindRecipeByIdRequest, opts ...grpc.CallOption) (*FindRecipeByIdResponse, error) {
	out := new(FindRecipeByIdResponse)
	err := c.cc.Invoke(ctx, "/menu.MenuService/FindRecipeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) ListRecipes(ctx context.Context, in *ListRecipesRequest, opts ...grpc.CallOption) (*ListRecipesResponse, error) {
	out := new(ListRecipesResponse)
	err := c.cc.Invoke(ctx, "/menu.MenuService/ListRecipes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MenuServiceServer is the server API for MenuService service.
// All implementations should embed UnimplementedMenuServiceServer
// for forward compatibility
type MenuServiceServer interface {
	// food
	FindFoodById(context.Context, *FindFoodByIdRequest) (*FindFoodByIdResponse, error)
	ListFoods(context.Context, *ListFoodsRequest) (*ListFoodsResponse, error)
	SearchFoods(context.Context, *SearchFoodsRequest) (*SearchFoodsResponse, error)
	// recipe
	CreateRecipe(context.Context, *CreateRecipeRequest) (*CreateRecipeResponse, error)
	FindRecipeById(context.Context, *FindRecipeByIdRequest) (*FindRecipeByIdResponse, error)
	ListRecipes(context.Context, *ListRecipesRequest) (*ListRecipesResponse, error)
}

// UnimplementedMenuServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMenuServiceServer struct {
}

func (UnimplementedMenuServiceServer) FindFoodById(context.Context, *FindFoodByIdRequest) (*FindFoodByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFoodById not implemented")
}
func (UnimplementedMenuServiceServer) ListFoods(context.Context, *ListFoodsRequest) (*ListFoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFoods not implemented")
}
func (UnimplementedMenuServiceServer) SearchFoods(context.Context, *SearchFoodsRequest) (*SearchFoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFoods not implemented")
}
func (UnimplementedMenuServiceServer) CreateRecipe(context.Context, *CreateRecipeRequest) (*CreateRecipeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecipe not implemented")
}
func (UnimplementedMenuServiceServer) FindRecipeById(context.Context, *FindRecipeByIdRequest) (*FindRecipeByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRecipeById not implemented")
}
func (UnimplementedMenuServiceServer) ListRecipes(context.Context, *ListRecipesRequest) (*ListRecipesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecipes not implemented")
}

// UnsafeMenuServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MenuServiceServer will
// result in compilation errors.
type UnsafeMenuServiceServer interface {
	mustEmbedUnimplementedMenuServiceServer()
}

func RegisterMenuServiceServer(s grpc.ServiceRegistrar, srv MenuServiceServer) {
	s.RegisterService(&MenuService_ServiceDesc, srv)
}

func _MenuService_FindFoodById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFoodByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).FindFoodById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.MenuService/FindFoodById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).FindFoodById(ctx, req.(*FindFoodByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_ListFoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).ListFoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.MenuService/ListFoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).ListFoods(ctx, req.(*ListFoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_SearchFoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).SearchFoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.MenuService/SearchFoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).SearchFoods(ctx, req.(*SearchFoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_CreateRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).CreateRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.MenuService/CreateRecipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).CreateRecipe(ctx, req.(*CreateRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_FindRecipeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRecipeByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).FindRecipeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.MenuService/FindRecipeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).FindRecipeById(ctx, req.(*FindRecipeByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_ListRecipes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecipesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).ListRecipes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.MenuService/ListRecipes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).ListRecipes(ctx, req.(*ListRecipesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MenuService_ServiceDesc is the grpc.ServiceDesc for MenuService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MenuService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "menu.MenuService",
	HandlerType: (*MenuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindFoodById",
			Handler:    _MenuService_FindFoodById_Handler,
		},
		{
			MethodName: "ListFoods",
			Handler:    _MenuService_ListFoods_Handler,
		},
		{
			MethodName: "SearchFoods",
			Handler:    _MenuService_SearchFoods_Handler,
		},
		{
			MethodName: "CreateRecipe",
			Handler:    _MenuService_CreateRecipe_Handler,
		},
		{
			MethodName: "FindRecipeById",
			Handler:    _MenuService_FindRecipeById_Handler,
		},
		{
			MethodName: "ListRecipes",
			Handler:    _MenuService_ListRecipes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/menu/proto/menu.proto",
}
